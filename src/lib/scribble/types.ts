/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/articles": {
    /**
     * Published articles
     * @description This endpoint allows the client to retrieve a list of articles.
     *
     * "Articles" are all the posts that users create on DEV that typically
     * show up in the feed. They can be a blog post, a discussion question,
     * a help thread etc. but is referred to as article within the code.
     *
     * By default it will return featured, published articles ordered
     * by descending popularity.
     *
     * It supports pagination, each page will contain `30` articles by default.
     */
    get: operations["getArticles"];
    /**
     * Publish article
     * @description This endpoint allows the client to create a new article.
     *
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     */
    post: operations["createArticle"];
  };
  "/api/articles/latest": {
    /**
     * Published articles sorted by published date
     * @description This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.
     *
     * It supports pagination, each page will contain 30 articles by default.
     */
    get: operations["getLatestArticles"];
  };
  "/api/articles/{id}": {
    /**
     * Published article by id
     * @description This endpoint allows the client to retrieve a single published article given its `id`.
     */
    get: operations["getArticleById"];
    /**
     * Update an article by id
     * @description This endpoint allows the client to update an existing article.
     *
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     */
    put: operations["updateArticle"];
  };
  "/api/articles/{username}/{slug}": {
    /**
     * Published article by path
     * @description This endpoint allows the client to retrieve a single published article given its `path`.
     */
    get: operations["getArticleByPath"];
  };
  "/api/articles/me": {
    /**
     * User's articles
     * @description This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
     *
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     *
     * Published articles will be in reverse chronological publication order.
     *
     * It will return published articles with pagination. By default a page will contain 30 articles.
     */
    get: operations["getUserArticles"];
  };
  "/api/articles/me/published": {
    /**
     * User's published articles
     * @description This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
     *
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     *
     * Published articles will be in reverse chronological publication order.
     *
     * It will return published articles with pagination. By default a page will contain 30 articles.
     */
    get: operations["getUserPublishedArticles"];
  };
  "/api/articles/me/unpublished": {
    /**
     * User's unpublished articles
     * @description This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.
     *
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     *
     * Unpublished articles will be in reverse chronological creation order.
     *
     * It will return unpublished articles with pagination. By default a page will contain 30 articles.
     */
    get: operations["getUserUnpublishedArticles"];
  };
  "/api/articles/me/all": {
    /**
     * User's all articles
     * @description This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.
     *
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     *
     * It will return both published and unpublished articles with pagination.
     *
     * Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.
     *
     * By default a page will contain 30 articles.
     */
    get: operations["getUserAllArticles"];
  };
  "/api/articles/{id}/unpublish": {
    /**
     * Unpublish an article
     * @description This endpoint allows the client to unpublish an article.
     *
     * The user associated with the API key must have any 'admin' or 'moderator' role.
     *
     * The article will be unpublished and will no longer be visible to the public. It will remain
     * in the database and will set back to draft status on the author's posts dashboard. Any
     * notifications associated with the article will be deleted. Any comments on the article
     * will remain.
     */
    put: operations["unpublishArticle"];
  };
  "/api/comments": {
    /**
     * Comments
     * @description This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.
     *
     * It will return the all top level comments with their nested comments as threads. See the format specification for further details.
     */
    get: operations["getCommentsByArticleId"];
  };
  "/api/comments/{id}": {
    /**
     * Comment by id
     * @description This endpoint allows the client to retrieve a comment as well as his descendants comments.
     *
     *   It will return the required comment (the root) with its nested descendants as a thread.
     *
     *   See the format specification for further details.
     */
    get: operations["getCommentById"];
  };
  "/api/display_ads": {
    /**
     * display ads
     * @description This endpoint allows the client to retrieve a list of all display ads.
     */
    get: {
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": components["schemas"]["DisplayAd"][];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
    /**
     * display ads
     * @description This endpoint allows the client to create a new display ad.
     */
    post: {
      requestBody?: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description unprocessable */
        422: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/display_ads/{id}": {
    /**
     * display ad
     * @description This endpoint allows the client to retrieve a single display ad, via its id.
     */
    get: {
      parameters: {
        path: {
          /**
           * @description The ID of the display ad.
           * @example 123
           */
          id: number;
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description Unknown DisplayAd ID */
        404: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
    /**
     * display ads
     * @description This endpoint allows the client to update the attributes of a single display ad, via its id.
     */
    put: {
      parameters: {
        path: {
          /**
           * @description The ID of the display ad.
           * @example 123
           */
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description not found */
        404: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/display_ads/{id}/unpublish": {
    /**
     * unpublish
     * @description This endpoint allows the client to remove a display ad from rotation by un-publishing it.
     */
    put: {
      parameters: {
        path: {
          /**
           * @description The ID of the display ad to unpublish.
           * @example 123
           */
          id: number;
        };
      };
      responses: {
        /** @description no content */
        204: {
          content: never;
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description not found */
        404: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/follows/tags": {
    /**
     * Followed Tags
     * @description This endpoint allows the client to retrieve a list of the tags they follow.
     */
    get: operations["getFollowedTags"];
  };
  "/api/followers/users": {
    /**
     * Followers
     * @description This endpoint allows the client to retrieve a list of the followers they have.
     *         "Followers" are users that are following other users on the website.
     *         It supports pagination, each page will contain 80 followers by default.
     */
    get: operations["getFollowers"];
  };
  "/api/organizations/{username}": {
    /**
     * An organization
     * @description This endpoint allows the client to retrieve a single organization by their username
     */
    get: operations["getOrganization"];
  };
  "/api/organizations/{username}/users": {
    /**
     * Organization's users
     * @description This endpoint allows the client to retrieve a list of users belonging to the organization
     *
     * It supports pagination, each page will contain `30` users by default.
     */
    get: operations["getOrgUsers"];
  };
  "/api/organizations/{username}/articles": {
    /**
     * Organization's Articles
     * @description This endpoint allows the client to retrieve a list of Articles belonging to the organization
     *
     * It supports pagination, each page will contain `30` users by default.
     */
    get: operations["getOrgArticles"];
  };
  "/api/pages": {
    /**
     * show details for all pages
     * @description This endpoint allows the client to retrieve details for all Page objects.
     */
    get: {
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": components["schemas"]["Page"][];
          };
        };
      };
    };
    /**
     * pages
     * @description This endpoint allows the client to create a new page.
     */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @description Title of the page */
            title?: string;
            /** @description Used to link to this page in URLs, must be unique and URL-safe */
            slug?: string;
            /** @description For internal use, helps similar pages from one another */
            description?: string;
            /** @description The text (in markdown) of the ad (required) */
            body_markdown?: string;
            /** @description For JSON pages, the JSON body */
            body_json?: string;
            /** @description If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution */
            is_top_level_path?: boolean;
            /**
             * @description Controls what kind of layout the page is rendered in
             * @default contained
             * @enum {string}
             */
            template?:
              | "contained"
              | "full_within_layout"
              | "nav_bar_included"
              | "json";
          };
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description unprocessable */
        422: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/pages/{id}": {
    /**
     * show details for a page
     * @description This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     */
    get: {
      parameters: {
        path: {
          /**
           * @description The ID of the page.
           * @example 1
           */
          id: number;
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": components["schemas"]["Page"];
          };
        };
      };
    };
    /**
     * update details for a page
     * @description This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     */
    put: {
      parameters: {
        path: {
          /**
           * @description The ID of the page.
           * @example 1
           */
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Page"];
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": components["schemas"]["Page"];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description unprocessable */
        422: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
    /**
     * remove a page
     * @description This endpoint allows the client to delete a single Page object, specified by ID.
     */
    delete: {
      parameters: {
        path: {
          /**
           * @description The ID of the page.
           * @example 1
           */
          id: number;
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": components["schemas"]["Page"];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description unprocessable */
        422: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/podcast_episodes": {
    /**
     * Podcast Episodes
     * @description This endpoint allows the client to retrieve a list of podcast episodes.
     *         "Podcast episodes" are episodes belonging to podcasts.
     *         It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.
     *         It supports pagination, each page will contain 30 articles by default.
     */
    get: operations["getPodcastEpisodes"];
  };
  "/api/profile_images/{username}": {
    /**
     * A Users or organizations profile image
     * @description This endpoint allows the client to retrieve a user or organization profile image information by its
     *         corresponding username.
     */
    get: operations["getProfileImage"];
  };
  "/api/reactions/toggle": {
    /**
     * toggle reaction
     * @description This endpoint allows the client to toggle the user's reaction to a specified reactable (eg, Article, Comment, or User). For examples:
     *         * "Like"ing an Article will create a new "like" Reaction from the user for that Articles
     *         * "Like"ing that Article a second time will remove the "like" from the user
     */
    post: {
      parameters: {
        query: {
          category:
            | "like"
            | "unicorn"
            | "exploding_head"
            | "raised_hands"
            | "fire";
          reactable_id: number;
          reactable_type: "Comment" | "Article" | "User";
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/reactions": {
    /**
     * create reaction
     * @description This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:
     *         * "Like"ing an Article will create a new "like" Reaction from the user for that Articles
     *         * "Like"ing that Article a second time will return the previous "like"
     */
    post: {
      parameters: {
        query: {
          category:
            | "like"
            | "unicorn"
            | "exploding_head"
            | "raised_hands"
            | "fire";
          reactable_id: number;
          reactable_type: "Comment" | "Article" | "User";
        };
      };
      responses: {
        /** @description successful */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/readinglist": {
    /**
     * Readinglist
     * @description This endpoint allows the client to retrieve a list of articles that were saved to a Users readinglist.
     *         It supports pagination, each page will contain `30` articles by default
     */
    get: operations["getReadinglist"];
  };
  "/api/tags": {
    /**
     * Tags
     * @description This endpoint allows the client to retrieve a list of tags that can be used to tag articles.
     *
     * It will return tags ordered by popularity.
     *
     * It supports pagination, each page will contain 10 tags by default.
     */
    get: operations["getTags"];
  };
  "/api/users/me": {
    /**
     * The authenticated user
     * @description This endpoint allows the client to retrieve information about the authenticated user
     */
    get: operations["getUserMe"];
  };
  "/api/users/{id}": {
    /**
     * A User
     * @description This endpoint allows the client to retrieve a single user, either by id
     * or by the user's username.
     *
     * For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
     */
    get: operations["getUser"];
  };
  "/api/users/{id}/unpublish": {
    /**
     * Unpublish a User's Articles and Comments
     * @description This endpoint allows the client to unpublish all of the articles and
     * comments created by a user.
     *
     * The user associated with the API key must have any 'admin' or 'moderator' role.
     *
     * This specified user's articles and comments will be unpublished and will no longer be
     * visible to the public. They will remain in the database and will set back to draft status
     * on the specified user's  dashboard. Any notifications associated with the specified user's
     * articles and comments will be deleted.
     *
     * Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT
     * status code immediately, but the articles and comments will not be unpublished until the
     * request is completed on the server.
     */
    put: operations["unpublishUser"];
  };
  "/api/users/{id}/suspend": {
    /**
     * Suspend a User
     * @description This endpoint allows the client to suspend a user.
     *
     * The user associated with the API key must have any 'admin' or 'moderator' role.
     *
     * This specified user will be assigned the 'suspended' role. Suspending a user will stop the
     * user from posting new posts and comments. It doesn't delete any of the user's content, just
     * prevents them from creating new content while suspended. Users are not notified of their suspension
     * in the UI, so if you want them to know about this, you must notify them.
     */
    put: operations["suspendUser"];
  };
  "/api/admin/users": {
    /**
     * Invite a User
     * @description This endpoint allows the client to trigger an invitation to the provided email address.
     *
     *         It requires a token from a user with `super_admin` privileges.
     */
    post: operations["postAdminUsersCreate"];
  };
  "/api/videos": {
    /**
     * Articles with a video
     * @description This endpoint allows the client to retrieve a list of articles that are uploaded with a video.
     *
     * It will only return published video articles ordered by descending popularity.
     *
     * It supports pagination, each page will contain 24 articles by default.
     */
    get: operations["videos"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Flare tag of the article */
    ArticleFlareTag: {
      name?: string;
      /** @description Background color (hexadecimal) */
      bg_color_hex?: string | null;
      /** @description Text color (hexadecimal) */
      text_color_hex?: string | null;
    };
    /** @description Representation of an article or post returned in a list */
    ArticleIndex: {
      type_of: string;
      /** Format: int32 */
      id: number;
      title: string;
      description: string;
      /** Format: url */
      cover_image: string | null;
      readable_publish_date: string;
      /** Format: url */
      social_image: string;
      tag_list: string[];
      tags: string;
      slug: string;
      /** Format: path */
      path: string;
      /** Format: url */
      url: string;
      /** Format: url */
      canonical_url: string;
      /** Format: int32 */
      positive_reactions_count: number;
      /** Format: int32 */
      public_reactions_count: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      edited_at: string | null;
      /** Format: date-time */
      crossposted_at: string | null;
      /** Format: date-time */
      published_at: string;
      /** Format: date-time */
      last_comment_at: string;
      /**
       * Format: date-time
       * @description Crossposting or published date time
       */
      published_timestamp: string;
      /**
       * Format: int32
       * @description Reading time, in minutes
       */
      reading_time_minutes: number;
      user: components["schemas"]["SharedUser"];
      flare_tag?: components["schemas"]["ArticleFlareTag"];
      organization?: components["schemas"]["SharedOrganization"];
    };
    /** @description Representation of an Article with video */
    VideoArticle: {
      type_of?: string;
      /** Format: int64 */
      id?: number;
      path?: string;
      cloudinary_video_url?: string;
      title?: string;
      /** Format: int64 */
      user_id?: number;
      video_duration_in_minutes?: string;
      video_source_url?: string;
      /** @description Author of the article */
      user?: {
        name?: string;
      };
    };
    /** @description Representation of an Article to be created/updated */
    Article: {
      article?: {
        title?: string;
        body_markdown?: string;
        /** @default false */
        published?: boolean;
        series?: string | null;
        main_image?: string | null;
        canonical_url?: string | null;
        description?: string;
        tags?: string;
        organization_id?: number | null;
      };
    };
    /** @description Representation of an Organization */
    Organization: {
      type_of?: string;
      username?: string;
      name?: string;
      summary?: string;
      twitter_username?: string;
      github_username?: string;
      url?: string;
      location?: string;
      joined_at?: string;
      tech_stack?: string;
      tag_line?: string | null;
      story?: string | null;
    };
    /** @description Representation of a followed tag */
    FollowedTag: {
      /**
       * Format: int64
       * @description Tag id
       */
      id: number;
      name: string;
      /** Format: float */
      points: number;
    };
    /** @description Representation of a tag */
    Tag: {
      /**
       * Format: int64
       * @description Tag id
       */
      id?: number;
      name?: string;
      bg_color_hex?: string | null;
      text_color_hex?: string | null;
    };
    /** @description Representation of a page object */
    Page: {
      /** @description Title of the page */
      title: string;
      /** @description Used to link to this page in URLs, must be unique and URL-safe */
      slug: string;
      /** @description For internal use, helps similar pages from one another */
      description: string;
      /** @description The text (in markdown) of the ad (required) */
      body_markdown?: string | null;
      /** @description For JSON pages, the JSON body */
      body_json?: string | null;
      /** @description If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution */
      is_top_level_path?: boolean;
      social_image?: Record<string, unknown> | null;
      /**
       * @description Controls what kind of layout the page is rendered in
       * @default contained
       * @enum {string}
       */
      template:
        | "contained"
        | "full_within_layout"
        | "nav_bar_included"
        | "json";
    };
    /** @description Representation of a podcast episode returned in a list */
    PodcastEpisodeIndex: {
      type_of: string;
      /** Format: int32 */
      id: number;
      class_name: string;
      /** Format: path */
      path: string;
      title: string;
      /**
       * Format: url
       * @description Podcast episode image url or podcast image url
       */
      image_url: string;
      podcast: components["schemas"]["SharedPodcast"];
    };
    /** @description A profile image object */
    ProfileImage: {
      /** @description Return profile_image */
      type_of?: string;
      /** @description Determines the type of the profile image owner (user or organization) */
      image_of?: string;
      /** @description Profile image (640x640) */
      profile_image?: string;
      /** @description Profile image (90x90) */
      profile_image_90?: string;
    };
    /** @description The resource creator */
    SharedUser: {
      name?: string;
      username?: string;
      twitter_username?: string | null;
      github_username?: string | null;
      /** Format: url */
      website_url?: string | null;
      /** @description Profile image (640x640) */
      profile_image?: string;
      /** @description Profile image (90x90) */
      profile_image_90?: string;
    };
    /** @description The organization the resource belongs to */
    SharedOrganization: {
      name?: string;
      username?: string;
      slug?: string;
      /**
       * Format: url
       * @description Profile image (640x640)
       */
      profile_image?: string;
      /**
       * Format: url
       * @description Profile image (90x90)
       */
      profile_image_90?: string;
    };
    /** @description The representation of a user */
    User: {
      type_of?: string;
      /** Format: int64 */
      id?: number;
      username?: string;
      name?: string;
      summary?: string | null;
      twitter_username?: string;
      github_username?: string;
      website_url?: string | null;
      location?: string | null;
      joined_at?: string;
      profile_image?: string;
    };
    /** @description The podcast that the resource belongs to */
    SharedPodcast: {
      title?: string;
      slug?: string;
      /**
       * Format: url
       * @description Podcast image url
       */
      image_url?: string;
    };
    /** @description A Comment on an Article or Podcast Episode */
    Comment: {
      type_of?: string;
      id_code?: string;
      /** Format: date-time */
      created_at?: string;
      /**
       * Format: url
       * @description Podcast image url
       */
      image_url?: string;
    };
    /** @description User invite parameters */
    UserInviteParam: {
      email?: string;
      name?: string | null;
    };
    /** @description A Display Ad, aka Billboard, aka Widget */
    DisplayAd: {
      /** @description The ID of the Display Ad */
      id?: number;
      /** @description For internal use, helps distinguish ads from one another */
      name: string;
      /** @description The text (in markdown) of the ad (required) */
      body_markdown: string;
      /** @description Ad must be both published and approved to be in rotation */
      approved?: boolean;
      /** @description Ad must be both published and approved to be in rotation */
      published?: boolean;
      /** @description Identifies the organization to which the ad belongs */
      organization_id?: number | null;
      /** @description Identifies the user who created the ad. */
      creator_id?: number | null;
      /**
       * @description Identifies which area of site layout the ad can appear in
       * @enum {string}
       */
      placement_area:
        | "sidebar_left"
        | "sidebar_left_2"
        | "sidebar_right"
        | "feed_first"
        | "feed_second"
        | "feed_third"
        | "post_sidebar"
        | "post_comments";
      /** @description Tags on which this ad can be displayed (blank is all/any tags) */
      tag_list?: string;
      /** @description Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs */
      article_exclude_ids?: string | null;
      /**
       * @description Specifies an group of users to show this ad to (only works with logged-in users)
       * @enum {string}
       */
      audience_segment_type?:
        | "testing"
        | "trusted"
        | "posted"
        | "no_posts_yet"
        | "dark_theme"
        | "light_theme"
        | "no_experience"
        | "experience1"
        | "experience2"
        | "experience3"
        | "experience4"
        | "experience5";
      /**
       * @description Potentially limits visitors to whom the ad is visible
       * @default all
       * @enum {string}
       */
      display_to?: "all" | "logged_in" | "logged_out";
      /**
       * @description Types of the billboards:
       * in_house (created by admins),
       * community (created by an entity, appears on entity's content),
       * external ( created by an entity, or a non-entity, can appear everywhere)
       *
       * @default in_house
       * @enum {string}
       */
      type_of?: "in_house" | "community" | "external";
    };
  };
  responses: never;
  parameters: {
    /** @description Pagination page */
    pageParam?: number;
    /** @description Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable. */
    perPageParam10to1000?: number;
    /** @description Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable. */
    perPageParam24to1000?: number;
    /** @description Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable. */
    perPageParam30to1000?: number;
    /** @description Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable. */
    perPageParam30to100?: number;
    /** @description Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable. */
    perPageParam80to1000?: number;
    /**
     * @description Using this parameter will return listings belonging to the
     *               requested category.
     * @example cfp
     */
    listingCategoryParam?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Published articles
   * @description This endpoint allows the client to retrieve a list of articles.
   *
   * "Articles" are all the posts that users create on DEV that typically
   * show up in the feed. They can be a blog post, a discussion question,
   * a help thread etc. but is referred to as article within the code.
   *
   * By default it will return featured, published articles ordered
   * by descending popularity.
   *
   * It supports pagination, each page will contain `30` articles by default.
   */
  getArticles: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
        /**
         * @description Using this parameter will retrieve articles that contain the requested tag. Articles
         * will be ordered by descending popularity.This parameter can be used in conjuction with `top`.
         * @example discuss
         */
        tag?: string;
        /**
         * @description Using this parameter will retrieve articles with any of the comma-separated tags.
         * Articles will be ordered by descending popularity.
         * @example javascript, css
         */
        tags?: string;
        /**
         * @description Using this parameter will retrieve articles that do _not_ contain _any_
         * of comma-separated tags. Articles will be ordered by descending popularity.
         * @example node, java
         */
        tags_exclude?: string;
        /**
         * @description Using this parameter will retrieve articles belonging
         *             to a User or Organization ordered by descending publication date.
         *             If `state=all` the number of items returned will be `1000` instead of the default `30`.
         *             This parameter can be used in conjuction with `state`.
         * @example ben
         */
        username?: string;
        /**
         * @description Using this parameter will allow the client to check which articles are fresh or rising.
         *             If `state=fresh` the server will return fresh articles.
         *             If `state=rising` the server will return rising articles.
         *             This param can be used in conjuction with `username`, only if set to `all`.
         * @example fresh
         */
        state?: "fresh" | "rising" | "all";
        /**
         * @description Using this parameter will allow the client to return the most popular articles
         * in the last `N` days.
         * `top` indicates the number of days since publication of the articles returned.
         * This param can be used in conjuction with `tag`.
         * @example 2
         */
        top?: number;
        /**
         * @description Adding this will allow the client to return the list of articles
         * belonging to the requested collection, ordered by ascending publication date.
         * @example 99
         */
        collection_id?: number;
      };
    };
    responses: {
      /** @description A List of Articles */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleIndex"][];
        };
      };
    };
  };
  /**
   * Publish article
   * @description This endpoint allows the client to create a new article.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   */
  createArticle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Article"];
      };
    };
    responses: {
      /** @description An Article */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Published articles sorted by published date
   * @description This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.
   *
   * It supports pagination, each page will contain 30 articles by default.
   */
  getLatestArticles: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
      };
    };
    responses: {
      /** @description A List of Articles */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleIndex"][];
        };
      };
    };
  };
  /**
   * Published article by id
   * @description This endpoint allows the client to retrieve a single published article given its `id`.
   */
  getArticleById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description An Article */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Article Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update an article by id
   * @description This endpoint allows the client to update an existing article.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   */
  updateArticle: {
    parameters: {
      path: {
        /**
         * @description The ID of the user to unpublish.
         * @example 123
         */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Article"];
      };
    };
    responses: {
      /** @description An Article */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Article Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Published article by path
   * @description This endpoint allows the client to retrieve a single published article given its `path`.
   */
  getArticleByPath: {
    parameters: {
      path: {
        username: string;
        slug: string;
      };
    };
    responses: {
      /** @description An Article */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Article Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * User's articles
   * @description This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Published articles will be in reverse chronological publication order.
   *
   * It will return published articles with pagination. By default a page will contain 30 articles.
   */
  getUserArticles: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
      };
    };
    responses: {
      /** @description A List of the authenticated user's Articles */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleIndex"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * User's published articles
   * @description This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Published articles will be in reverse chronological publication order.
   *
   * It will return published articles with pagination. By default a page will contain 30 articles.
   */
  getUserPublishedArticles: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
      };
    };
    responses: {
      /** @description A List of the authenticated user's Articles */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleIndex"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * User's unpublished articles
   * @description This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Unpublished articles will be in reverse chronological creation order.
   *
   * It will return unpublished articles with pagination. By default a page will contain 30 articles.
   */
  getUserUnpublishedArticles: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
      };
    };
    responses: {
      /** @description A List of the authenticated user's Articles */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleIndex"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * User's all articles
   * @description This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * It will return both published and unpublished articles with pagination.
   *
   * Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.
   *
   * By default a page will contain 30 articles.
   */
  getUserAllArticles: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
      };
    };
    responses: {
      /** @description A List of the authenticated user's Articles */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleIndex"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Unpublish an article
   * @description This endpoint allows the client to unpublish an article.
   *
   * The user associated with the API key must have any 'admin' or 'moderator' role.
   *
   * The article will be unpublished and will no longer be visible to the public. It will remain
   * in the database and will set back to draft status on the author's posts dashboard. Any
   * notifications associated with the article will be deleted. Any comments on the article
   * will remain.
   */
  unpublishArticle: {
    parameters: {
      query?: {
        /**
         * @description Content for the note that's created along with unpublishing
         * @example Admin requested unpublishing all articles via API
         */
        note?: string;
      };
      path: {
        /**
         * @description The ID of the article to unpublish.
         * @example 1
         */
        id: number;
      };
    };
    responses: {
      /** @description Article successfully unpublished */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Article Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Comments
   * @description This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.
   *
   * It will return the all top level comments with their nested comments as threads. See the format specification for further details.
   */
  getCommentsByArticleId: {
    parameters: {
      query?: {
        /**
         * @description Article identifier.
         * @example 321
         */
        a_id?: string;
        /**
         * @description Podcast Episode identifier.
         * @example 321
         */
        p_id?: string;
      };
    };
    responses: {
      /** @description A List of Comments */
      200: {
        content: {
          "application/json": components["schemas"]["Comment"][];
        };
      };
      /** @description Resource Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Comment by id
   * @description This endpoint allows the client to retrieve a comment as well as his descendants comments.
   *
   *   It will return the required comment (the root) with its nested descendants as a thread.
   *
   *   See the format specification for further details.
   */
  getCommentById: {
    parameters: {
      path: {
        /**
         * @description Comment identifier.
         * @example 321
         */
        id: number;
      };
    };
    responses: {
      /** @description A List of the Comments */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Comment Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Followed Tags
   * @description This endpoint allows the client to retrieve a list of the tags they follow.
   */
  getFollowedTags: {
    responses: {
      /** @description A List of followed tags */
      200: {
        content: {
          "application/json": components["schemas"]["FollowedTag"][];
        };
      };
      /** @description unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Followers
   * @description This endpoint allows the client to retrieve a list of the followers they have.
   *         "Followers" are users that are following other users on the website.
   *         It supports pagination, each page will contain 80 followers by default.
   */
  getFollowers: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
        /**
         * @description Default is 'created_at'. Specifies the sort order for the created_at param of the follow
         *                                 relationship. To sort by newest followers first (descending order) specify
         *                                 ?sort=-created_at.
         * @example created_at
         */
        sort?: string;
      };
    };
    responses: {
      /** @description A List of followers */
      200: {
        content: {
          "application/json": {
            /** @description user_follower by default */
            type_of?: string;
            /** Format: int32 */
            id?: number;
            /**
             * Format: int32
             * @description The follower's user id
             */
            user_id?: number;
            /** @description The follower's name */
            name?: string;
            /** @description A path to the follower's profile */
            path?: string;
            /** @description Profile image (640x640) */
            profile_image?: string;
          }[];
        };
      };
      /** @description unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * An organization
   * @description This endpoint allows the client to retrieve a single organization by their username
   */
  getOrganization: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description An Organization */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Organization's users
   * @description This endpoint allows the client to retrieve a list of users belonging to the organization
   *
   * It supports pagination, each page will contain `30` users by default.
   */
  getOrgUsers: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
      };
      path: {
        username: string;
      };
    };
    responses: {
      /** @description An Organization's users */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Organization's Articles
   * @description This endpoint allows the client to retrieve a list of Articles belonging to the organization
   *
   * It supports pagination, each page will contain `30` users by default.
   */
  getOrgArticles: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
      };
      path: {
        username: string;
      };
    };
    responses: {
      /** @description An Organization's Articles */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleIndex"][];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Podcast Episodes
   * @description This endpoint allows the client to retrieve a list of podcast episodes.
   *         "Podcast episodes" are episodes belonging to podcasts.
   *         It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.
   *         It supports pagination, each page will contain 30 articles by default.
   */
  getPodcastEpisodes: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
        /**
         * @description Using this parameter will retrieve episodes belonging to a specific podcast.
         * @example codenewbie
         */
        username?: string;
      };
    };
    responses: {
      /** @description A List of Podcast episodes filtered by username */
      200: {
        content: {
          "application/json": components["schemas"]["PodcastEpisodeIndex"][];
        };
      };
      /** @description Unknown Podcast username */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * A Users or organizations profile image
   * @description This endpoint allows the client to retrieve a user or organization profile image information by its
   *         corresponding username.
   */
  getProfileImage: {
    parameters: {
      path: {
        /**
         * @description The parameter is the username of the user or the username of the organization.
         * @example janedoe
         */
        username: string;
      };
    };
    responses: {
      /** @description An object containing profile image details */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Resource Not Found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Readinglist
   * @description This endpoint allows the client to retrieve a list of articles that were saved to a Users readinglist.
   *         It supports pagination, each page will contain `30` articles by default
   */
  getReadinglist: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam30to1000"];
      };
    };
    responses: {
      /** @description A list of articles in the users readinglist */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleIndex"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Tags
   * @description This endpoint allows the client to retrieve a list of tags that can be used to tag articles.
   *
   * It will return tags ordered by popularity.
   *
   * It supports pagination, each page will contain 10 tags by default.
   */
  getTags: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam10to1000"];
      };
    };
    responses: {
      /** @description A List of all tags */
      200: {
        content: {
          "application/json": components["schemas"]["Tag"][];
        };
      };
    };
  };
  /**
   * The authenticated user
   * @description This endpoint allows the client to retrieve information about the authenticated user
   */
  getUserMe: {
    responses: {
      /** @description successful */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * A User
   * @description This endpoint allows the client to retrieve a single user, either by id
   * or by the user's username.
   *
   * For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
   */
  getUser: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description successful */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Unpublish a User's Articles and Comments
   * @description This endpoint allows the client to unpublish all of the articles and
   * comments created by a user.
   *
   * The user associated with the API key must have any 'admin' or 'moderator' role.
   *
   * This specified user's articles and comments will be unpublished and will no longer be
   * visible to the public. They will remain in the database and will set back to draft status
   * on the specified user's  dashboard. Any notifications associated with the specified user's
   * articles and comments will be deleted.
   *
   * Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT
   * status code immediately, but the articles and comments will not be unpublished until the
   * request is completed on the server.
   */
  unpublishUser: {
    parameters: {
      path: {
        /**
         * @description The ID of the user to unpublish.
         * @example 1
         */
        id: number;
      };
    };
    responses: {
      /** @description User's articles and comments successfully unpublished */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unknown User ID (still accepted for async processing) */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Suspend a User
   * @description This endpoint allows the client to suspend a user.
   *
   * The user associated with the API key must have any 'admin' or 'moderator' role.
   *
   * This specified user will be assigned the 'suspended' role. Suspending a user will stop the
   * user from posting new posts and comments. It doesn't delete any of the user's content, just
   * prevents them from creating new content while suspended. Users are not notified of their suspension
   * in the UI, so if you want them to know about this, you must notify them.
   */
  suspendUser: {
    parameters: {
      path: {
        /**
         * @description The ID of the user to suspend.
         * @example 1
         */
        id: number;
      };
    };
    responses: {
      /** @description User successfully unpublished */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unknown User ID */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Invite a User
   * @description This endpoint allows the client to trigger an invitation to the provided email address.
   *
   *         It requires a token from a user with `super_admin` privileges.
   */
  postAdminUsersCreate: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserInviteParam"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Articles with a video
   * @description This endpoint allows the client to retrieve a list of articles that are uploaded with a video.
   *
   * It will only return published video articles ordered by descending popularity.
   *
   * It supports pagination, each page will contain 24 articles by default.
   */
  videos: {
    parameters: {
      query?: {
        page?: components["parameters"]["pageParam"];
        per_page?: components["parameters"]["perPageParam24to1000"];
      };
    };
    responses: {
      /** @description A List of all articles with videos */
      200: {
        content: {
          "application/json": components["schemas"]["VideoArticle"][];
        };
      };
    };
  };
}
